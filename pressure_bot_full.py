import os
import logging
import asyncio
import schedule
import time
from datetime import datetime, timedelta
import pandas as pd
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import pytz
import threading
import sys
load_dotenv()
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)
MOSCOW_TZ = pytz.timezone('Europe/Moscow')
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
def init_db():
    try:
        pressure_file = os.path.join(SCRIPT_DIR, 'pressure_data.csv')
        meds_file = os.path.join(SCRIPT_DIR, 'medications.csv')
        if not os.path.exists(pressure_file):
            df = pd.DataFrame(columns=['user_id', 'date', 'systolic', 'diastolic', 'pulse', 'notes'])
            df.to_csv(pressure_file, index=False)
            logger.info("–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª pressure_data.csv")
        if not os.path.exists(meds_file):
            df = pd.DataFrame(columns=['user_id', 'medication_name', 'time', 'frequency'])
            df.to_csv(meds_file, index=False)
            logger.info("–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª medications.csv")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        sys.exit(1)
class MedicationReminder:
    def __init__(self, bot_token):
        self.bot = Bot(token=bot_token)
        self.running = False
        self.loop = None
        self.thread = None
    async def send_reminder(self, user_id, medication_name, time_str):
        try:
            message = (
                f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\n"
                f"–ü–æ—Ä–∞ –ø—Ä–∏–Ω—è—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ:\n"
                f"üíä {medication_name}\n"
                f"üïí –í—Ä–µ–º—è (–ú–°–ö): {time_str}"
            )
            await self.bot.send_message(chat_id=user_id, text=message)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ –ø—Ä–∏–µ–º–µ {medication_name}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
    def check_medications(self):
        try:
            current_time = datetime.now(MOSCOW_TZ).strftime('%H:%M')
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–ú–°–ö): {current_time}")
            meds_file = os.path.join(SCRIPT_DIR, 'medications.csv')
            df = pd.read_csv(meds_file)
            for _, row in df.iterrows():
                if row['time'] == current_time:
                    logger.info(f"–ù–∞–π–¥–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ {current_time}")
                    asyncio.run_coroutine_threadsafe(
                        self.send_reminder(
                            row['user_id'],
                            row['medication_name'],
                            row['time']
                        ),
                        self.loop
                    )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤: {e}")
    def run_async_loop(self):
        self.loop = asyncio.new_event_loop()
        asyncio.set_event_loop(self.loop)
        self.loop.run_forever()
    def start(self):
        self.running = True
        self.thread = threading.Thread(target=self.run_async_loop)
        self.thread.daemon = True
        self.thread.start()
        schedule.every().minute.do(self.check_medications)
        logger.info("–°–µ—Ä–≤–∏—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
        while self.running:
            schedule.run_pending()
            time.sleep(1)
    def stop(self):
        self.running = False
        schedule.clear()
        if self.loop:
            self.loop.call_soon_threadsafe(self.loop.stop)
        if self.thread:
            self.thread.join()
        logger.info("–°–µ—Ä–≤–∏—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–∞–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–∏–µ–º–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/pressure - –ó–∞–ø–∏—Å–∞—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–∞–≤–ª–µ–Ω–∏—è\n"
        "/medication - –î–æ–±–∞–≤–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "/history - –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ—Ä–µ–Ω–∏–π\n"
        "/note - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∏–∑–º–µ—Ä–µ–Ω–∏—é\n"
        "/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é\n"
        "/export - –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Excel\n"
        "/test - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –±–æ—Ç–∞"
    )
    await update.message.reply_text(help_text)
async def pressure_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–∞–≤–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "—Å–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ –¥–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ –ø—É–ª—å—Å\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 120 80 72"
    )
async def medication_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ", callback_data="med_add")],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤", callback_data="med_list")],
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ", callback_data="med_delete")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üíä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞–º–∏:",
        reply_markup=reply_markup
    )
async def history_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        df = pd.read_csv(os.path.join(SCRIPT_DIR, 'pressure_data.csv'))
        user_data = df[df['user_id'] == user_id].tail(10)
        if user_data.empty:
            await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –¥–∞–≤–ª–µ–Ω–∏–∏.")
            return
        message = "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∏–∑–º–µ—Ä–µ–Ω–∏–π:\n\n"
        for _, row in user_data.iterrows():
            message += (
                f"–î–∞—Ç–∞: {row['date']}\n"
                f"–î–∞–≤–ª–µ–Ω–∏–µ: {row['systolic']}/{row['diastolic']}\n"
                f"–ü—É–ª—å—Å: {row['pulse']}\n"
                f"–ó–∞–º–µ—Ç–∫–∞: {row['notes'] if pd.notna(row['notes']) else '–ù–µ—Ç'}\n"
                f"-------------------\n"
            )
        await update.message.reply_text(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏.")
async def note_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        df = pd.read_csv(os.path.join(SCRIPT_DIR, 'pressure_data.csv'))
        user_data = df[df['user_id'] == user_id]
        if user_data.empty:
            await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –¥–∞–≤–ª–µ–Ω–∏–∏.")
            return
        last_record = user_data.iloc[-1]
        context.user_data['last_record'] = last_record
        await update.message.reply_text(
            f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ:\n"
            f"–î–∞—Ç–∞: {last_record['date']}\n"
            f"–î–∞–≤–ª–µ–Ω–∏–µ: {last_record['systolic']}/{last_record['diastolic']}\n"
            f"–ü—É–ª—å—Å: {last_record['pulse']}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∑–∞–º–µ—Ç–∫—É:"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏.")
async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        df = pd.read_csv(os.path.join(SCRIPT_DIR, 'pressure_data.csv'))
        user_data = df[df['user_id'] == user_id]
        if user_data.empty:
            await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –¥–∞–≤–ª–µ–Ω–∏–∏.")
            return
        week_ago = datetime.now(MOSCOW_TZ) - timedelta(days=7)
        week_data = user_data[pd.to_datetime(user_data['date']) >= week_ago]
        if week_data.empty:
            await update.message.reply_text("–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –¥–∞–≤–ª–µ–Ω–∏–∏.")
            return
        avg_systolic = week_data['systolic'].mean()
        avg_diastolic = week_data['diastolic'].mean()
        avg_pulse = week_data['pulse'].mean()
        message = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n\n"
            f"–°—Ä–µ–¥–Ω–µ–µ —Å–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ: {avg_systolic:.1f}\n"
            f"–°—Ä–µ–¥–Ω–µ–µ –¥–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ: {avg_diastolic:.1f}\n"
            f"–°—Ä–µ–¥–Ω–∏–π –ø—É–ª—å—Å: {avg_pulse:.1f}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π: {len(week_data)}"
        )
        await update.message.reply_text(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
async def export_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        date = datetime.now(MOSCOW_TZ).strftime('%Y%m%d')
        pressure_df = pd.read_csv(os.path.join(SCRIPT_DIR, 'pressure_data.csv'))
        pressure_data = pressure_df[pressure_df['user_id'] == user_id].copy()
        meds_df = pd.read_csv(os.path.join(SCRIPT_DIR, 'medications.csv'))
        meds_data = meds_df[meds_df['user_id'] == user_id].copy()
        excel_file = os.path.join(SCRIPT_DIR, f'pressure_data_{user_id}_{date}.xlsx')
        pressure_data['date'] = pd.to_datetime(pressure_data['date'])
        pressure_data = pressure_data.sort_values('date')
        pressure_data['date'] = pressure_data['date'].dt.strftime('%Y-%m-%d %H:%M:%S')
        pressure_data.columns = ['ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è', '–°–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ', '–î–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ', '–ü—É–ª—å—Å', '–ó–∞–º–µ—Ç–∫–∏']
        with pd.ExcelWriter(excel_file, engine='openpyxl') as writer:
            pressure_data.to_excel(writer, sheet_name='–ò–∑–º–µ—Ä–µ–Ω–∏—è –¥–∞–≤–ª–µ–Ω–∏—è', index=False)
            meds_data.to_excel(writer, sheet_name='–õ–µ–∫–∞—Ä—Å—Ç–≤–∞', index=False)
        await update.message.reply_document(
            document=open(excel_file, 'rb'),
            filename=f'pressure_data_{date}.xlsx',
            caption="üìä –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ Excel —Ñ–∞–π–ª."
        )
        os.remove(excel_file)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö.")
async def test_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
async def handle_frequency(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    frequency = query.data.split('_')[1]
    medication_name = context.user_data['medication_name']
    keyboard = []
    for hour in range(24):
        for minute in ['00', '30']:
            time_str = f"{hour:02d}:{minute}"
            keyboard.append([InlineKeyboardButton(time_str, callback_data=f"time_{time_str}")])
    await query.message.reply_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–∏–µ–º–∞ {medication_name} ({frequency}):",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
async def handle_medication_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action = query.data.split('_')[1]
    if action == 'add':
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞:")
    elif action == 'list':
        try:
            user_id = query.from_user.id
            df = pd.read_csv(os.path.join(SCRIPT_DIR, 'medications.csv'))
            user_meds = df[df['user_id'] == user_id]
            if user_meds.empty:
                await query.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤.")
                return
            message = "üìã –í–∞—à–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞:\n\n"
            for _, row in user_meds.iterrows():
                message += (
                    f"üíä {row['medication_name']}\n"
                    f"üïí –í—Ä–µ–º—è: {row['time']}\n"
                    f"üìÖ –ß–∞—Å—Ç–æ—Ç–∞: {row['frequency']}\n"
                    f"-------------------\n"
                )
            await query.message.reply_text(message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤: {e}")
            await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤.")
    elif action == 'delete':
        try:
            user_id = query.from_user.id
            df = pd.read_csv(os.path.join(SCRIPT_DIR, 'medications.csv'))
            user_meds = df[df['user_id'] == user_id]
            if user_meds.empty:
                await query.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤.")
                return
            keyboard = []
            for _, row in user_meds.iterrows():
                keyboard.append([
                    InlineKeyboardButton(
                        f"‚ùå {row['medication_name']} ({row['time']})",
                        callback_data=f"delete_med_{row['medication_name']}_{row['time']}"
                    )
                ])
            await query.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞: {e}")
            await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞.")
async def handle_medication_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    _, _, medication_name, time = query.data.split('_')
    user_id = query.from_user.id
    df = pd.read_csv(os.path.join(SCRIPT_DIR, 'medications.csv'))
    df = df[
        ~((df['user_id'] == user_id) & 
          (df['medication_name'] == medication_name) & 
          (df['time'] == time))
    ]
    df.to_csv(os.path.join(SCRIPT_DIR, 'medications.csv'), index=False)
    await query.message.reply_text(
        f"‚úÖ –õ–µ–∫–∞—Ä—Å—Ç–≤–æ {medication_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!"
    )
async def handle_pressure_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action = query.data.split('_')[1]
    if action == 'delete':
        try:
            user_id = query.from_user.id
            df = pd.read_csv(os.path.join(SCRIPT_DIR, 'pressure_data.csv'))
            user_data = df[df['user_id'] == user_id]
            if user_data.empty:
                await query.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –¥–∞–≤–ª–µ–Ω–∏–∏.")
                return
            df = df.drop(user_data.index[-1])
            df.to_csv(os.path.join(SCRIPT_DIR, 'pressure_data.csv'), index=False)
            await query.message.reply_text("‚úÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è: {e}")
            await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è.")
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = update.message.text
        user_id = update.effective_user.id
        if 'last_record' in context.user_data:
            note = text
            last_record = context.user_data['last_record']
            df = pd.read_csv(os.path.join(SCRIPT_DIR, 'pressure_data.csv'))
            df.loc[df['date'] == last_record['date'], 'notes'] = note
            df.to_csv(os.path.join(SCRIPT_DIR, 'pressure_data.csv'), index=False)
            await update.message.reply_text("‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            return
        if 'medication_name' not in context.user_data:
            try:
                systolic, diastolic, pulse = map(int, text.split())
                date = datetime.now(MOSCOW_TZ).strftime('%Y-%m-%d %H:%M:%S')
                df = pd.read_csv(os.path.join(SCRIPT_DIR, 'pressure_data.csv'))
                new_row = pd.DataFrame({
                    'user_id': [user_id],
                    'date': [date],
                    'systolic': [systolic],
                    'diastolic': [diastolic],
                    'pulse': [pulse],
                    'notes': ['']
                })
                df = pd.concat([df, new_row], ignore_index=True)
                df.to_csv(os.path.join(SCRIPT_DIR, 'pressure_data.csv'), index=False)
                keyboard = [
                    [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ", callback_data="pressure_delete")],
                    [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data="pressure_note")]
                ]
                await update.message.reply_text(
                    f"‚úÖ –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
                    f"–î–∞—Ç–∞: {date}\n"
                    f"–î–∞–≤–ª–µ–Ω–∏–µ: {systolic}/{diastolic}\n"
                    f"–ü—É–ª—å—Å: {pulse}",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            except ValueError:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç—Ä–∏ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n"
                    "—Å–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ –¥–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ –ø—É–ª—å—Å"
                )
        else:
            medication_name = text
            context.user_data['medication_name'] = medication_name
            keyboard = [
                [InlineKeyboardButton("–†–∞–∑ –≤ –¥–µ–Ω—å", callback_data="frequency_daily")],
                [InlineKeyboardButton("–î–≤–∞ —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å", callback_data="frequency_twice")],
                [InlineKeyboardButton("–¢—Ä–∏ —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å", callback_data="frequency_thrice")]
            ]
            await update.message.reply_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –ø—Ä–∏–µ–º–∞ {medication_name}:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
def main():
    try:
        init_db()
        token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not token:
            logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É–∫–∞–∑–∞–Ω –≤ —Ñ–∞–π–ª–µ .env")
            return
        application = Application.builder().token(token).build()
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("pressure", pressure_command))
        application.add_handler(CommandHandler("medication", medication_command))
        application.add_handler(CommandHandler("history", history_command))
        application.add_handler(CommandHandler("note", note_command))
        application.add_handler(CommandHandler("stats", stats_command))
        application.add_handler(CommandHandler("export", export_data))
        application.add_handler(CommandHandler("test", test_bot))
        application.add_handler(CallbackQueryHandler(handle_frequency, pattern='^frequency_\d+$'))
        application.add_handler(CallbackQueryHandler(handle_medication_action, pattern='^med_'))
        application.add_handler(CallbackQueryHandler(handle_medication_delete, pattern='^delete_med_'))
        application.add_handler(CallbackQueryHandler(handle_pressure_action, pattern='^pressure_'))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        reminder_service = MedicationReminder(token)
        reminder_thread = threading.Thread(target=reminder_service.start)
        reminder_thread.daemon = True
        reminder_thread.start()
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
if __name__ == '__main__':
    main() 